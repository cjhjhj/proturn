% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functionsFitting.R
\name{fitNLSModels}
\alias{fitNLSModels}
\title{Fitting protein degradation/synthesis curves using nonlinear 
  least square methods (NLS)}
\usage{
fitNLSModels(x, f, t, tcc = Inf, type = c("deg", "syn"), A = NULL,
  B = NULL, par.init = list(A = 0.9, B = 0.1, k = 0.04), par.lower = c(A =
  0, B = 0, k = 0), par.upper = c(A = 1, B = 1, k = 10), ncore = 1)
}
\arguments{
\item{x}{A numeric matrix where rows are variables (e.g. peptides or proteins)
and columns are different time points.}

\item{f}{A factor or vector, its length should be the same as the number of 
rows in \code{x}. It is possible to fit a single model using multiple lines, this is 
useful, for example, when multiple lines are from the peptide or protein. This
is implemented by multiple rows in \code{x} corresponds to the same with in \code{f}.}

\item{t}{The time point (hours)}

\item{tcc}{The doubling time of cells. By default this value is Inf, 
which means the cells are in steady state.}

\item{type}{which curve should be fitted, should be either "deg" (degradation curve) or "syn" (synthesis curve)}

\item{A}{optinal argument for fixed A, if this argument is given, "A" won't be optimized}

\item{B}{optional argument for fixed B, if this argument is given, "B" won't be optimized}

\item{par.init}{The initial values of parameters to be optimized, it should be list of three elements
names as "A", "B" and "k".}

\item{par.lower}{The lower boundary of parameters to be optimized, it should be a numeric values with
length 3 and named as "A", "B" and "k".}

\item{par.upper}{The upper boundary of parameters to be optimized, it should be a numeric values with
length 3 and named as "A", "B" and "k".}

\item{ncore}{the number of cores to be used, passed to \code{mclapply}}
}
\value{
A list of three elmenets
  \itemize{
    \item mat
    \item list
    \item type could be either combine, individual
  }
}
\description{
Main function to be called by users to fit
  protein degradation or synthesis curves using 
  nonlinear least square methods (NLS).
}
\details{
The function fit the following models:
for degradation
for synthesis
Using nls algorithm.
}
\examples{
tp <- c(0, 1, 2, 4, 8, 16, 32, 64)
A <- runif(5, min = 0.75, max = 0.95)
B <- runif(5, min = 0.1, max = 0.15)
kd <- runif(5, min = 0.05, max = 0.1)
ds <- mapply(function(A, B, kd) {
  degCurve(A=A, B=B, kd=kd, tcc=Inf, t = tp) + rnorm(length(tp), sd = 0.03)
}, A, B, kd)
ds <- t(ds)
ds <- rbind(ds, runif(8, 0, 1))

rf <- c("p1", "p2", "p2", "p3", "p3", "p3")

ss <- fitNLSModels(x = ds, f = rf, t = tp, tcc = Inf, type = "deg",
                   par.init = list(A=0.8, B=0.2, kd=0.04),
                   par.lower=c(A=0, B=0, kd=0),
                   par.upper=c(A=1, B=1, kd=10))

plotCurve.comb(x = ss$list$p1, t = tp, tcc = Inf, curve = "deg")
plotCurve.comb(x = ss$list$p2, t = tp, tcc = Inf, curve = "deg")
plotCurve.comb(x = ss$list$p3, t = tp, tcc = Inf, curve = "deg")


ds2 <- mapply(function(A, B, kd) {
  synCurve(A=A, B=B, kd=kd, tcc=Inf, t = tp) + rnorm(length(tp), sd = 0.03)
}, A, B, kd)
ds2 <- t(ds2)
ds2 <- rbind(ds2, runif(8, 0, 1))


ss2 <- fitNLSModels(x = ds2, f = rf, t = tp, tcc = Inf, type = "syn",
                    par.init = list(A=0.8, B=0.2, ks=0.04),
                    par.lower=c(A=0, B=0, ks=0),
                    par.upper=c(A=1, B=1, ks=10))

plotCurve.comb(x = ss2$list$p1, t = tp, tcc = Inf, curve = "syn")
plotCurve.comb(x = ss2$list$p2, t = tp, tcc = Inf, curve = "syn")
plotCurve.comb(x = ss2$list$p3, t = tp, tcc = Inf, curve = "syn")
}
